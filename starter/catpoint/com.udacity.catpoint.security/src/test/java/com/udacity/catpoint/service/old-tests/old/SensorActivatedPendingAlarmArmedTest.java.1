package com.udacity.catpoint.service;


import com.udacity.catpoint.data.*;
//import com.udacity.catpoint.service.*;
import com.udacity.catpoint.application.*;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.params.*;
import org.junit.jupiter.params.provider.*;

/* import org.mockito.*;
import org.mockito.junit.jupiter.*;
import org.mockito.stubbing.*;
import static org.mockito.Mockito.*;
import static org.mockito.AdditionalAnswers.*; */



/**
 * Unit test for Pending Alarm Status, when a sensor becomes active, and alarm armed.
 */

//@ExtendWith(MockitoExtension.class)
public class SensorActivatedPendingAlarmArmedTest 
{
	private SecurityRepository securityRepository;
	private SecurityService securityService;
	
	//@Mock
	//private SensorPanel sensorPanel; //= new SensorPanel(securityService);
	
    @ParameterizedTest
	@EnumSource(SensorType.class)
    public void PendingAlarmStatusTest(SensorType type)
    {
		securityRepository = new PretendDatabaseSecurityRepositoryImpl();
		securityService = new SecurityService(securityRepository);
		
		Sensor sensor = new Sensor("test", type);
		securityService.addSensor(sensor);
		
		/* doAnswer( answerVoid
					(
						new VoidAnswer2<Sensor, Boolean>()
						{
         					public void answer(Sensor sensor, Boolean active)
							{
								 securityService.changeSensorActivationStatus(sensor, active);
							}
						}
					)
				).when(sensorPanel).setSensorActivity(sensor, !Boolean.FALSE ); */
		
		securityRepository.setAlarmStatus(AlarmStatus.NO_ALARM);
		securityService.setArmingStatus(ArmingStatus.ARMED_HOME);
		
		securityService.changeSensorActivationStatus(sensor, !Boolean.FALSE);
		
        //sensorPanel.setSensorActivity(sensor, !Boolean.FALSE);
		
		assertEquals( AlarmStatus.PENDING_ALARM, securityService.getAlarmStatus() );
		
		//assertEquals( Boolean.TRUE, sensor.getActive() );
		
		//assertEquals( ArmingStatus.ARMED_HOME, securityService.getArmingStatus() );
	}
}
